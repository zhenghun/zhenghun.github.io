<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2024/11/15/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Java基础面试题</title>
    <url>/2024/11/15/Java-Base/</url>
    <content><![CDATA[<h1 id="Java中变量、代码块、构造器之间执行顺序是怎样的？"><a href="#Java中变量、代码块、构造器之间执行顺序是怎样的？" class="headerlink" title="Java中变量、代码块、构造器之间执行顺序是怎样的？"></a>Java中变量、代码块、构造器之间执行顺序是怎样的？</h1><ul>
<li>先初始化静态部分，在初始化动态部分；</li>
<li>先初始化父类，后初始化子类</li>
<li>先初始化变量，在初始化代码块和构造器</li>
</ul>
<p>所以按照这个规则可以得出总体顺序是：</p>
<ol>
<li>父类的静态成员变量（第一次加载）</li>
<li>父类的静态代码块（第一次加载）</li>
<li>子类的静态成员变量（第一次加载）</li>
<li>子类的静态代码块（第一次加载）</li>
<li>父类的普通成员变量</li>
<li>父类的动态代码块</li>
<li>父类的构造函数</li>
<li>子类的普通成员变量</li>
<li>子类的动态代码块</li>
<li>子类的构造函数<span id="more"></span></li>
</ol>
<h1 id="Java基本数据类型"><a href="#Java基本数据类型" class="headerlink" title="Java基本数据类型"></a>Java基本数据类型</h1><table>
<thead>
<tr>
<th>类型</th>
<th>字节数</th>
<th>默认值</th>
<th>取值范围</th>
</tr>
</thead>
<tbody><tr>
<td>byte</td>
<td>1字节</td>
<td>0</td>
<td>-128~127，也就是-2的7次方到2的7次方减1</td>
</tr>
<tr>
<td>short</td>
<td>2字节</td>
<td>0</td>
<td>－32768～32767，就是-2的15次方到2的15次方减1</td>
</tr>
<tr>
<td>int</td>
<td>4字节</td>
<td>0</td>
<td>-2147483648 - 2147483647，-2^31 - 2^31-1，十亿数量级</td>
</tr>
<tr>
<td>long</td>
<td>8字节</td>
<td>0</td>
<td>-2的63次方到2的64次方，换算成十进制的数，是有19位。</td>
</tr>
<tr>
<td>float</td>
<td>4字节</td>
<td>0.0</td>
<td></td>
</tr>
<tr>
<td>double</td>
<td>8字节</td>
<td>0.0</td>
<td></td>
</tr>
<tr>
<td>boolean</td>
<td>1字节</td>
<td>false</td>
<td></td>
</tr>
<tr>
<td>char</td>
<td>2字节</td>
<td>空</td>
<td>Java使用的是unicode编码，16个二进制位。取值范围会大一些，所以用的2字节，可以存汉字。</td>
</tr>
</tbody></table>
<p><img src="/2024/11/15/Java-Base/java-type.png" alt="图片" title="Java数据类型"></p>
<ul>
<li><strong>类：</strong>类是 Java 中最基本的引用数据类型。每个类都可以创建一个或多个对象（实例），这些对象通过引用变量来引用。</li>
<li><strong>接口：</strong>接口是一种特殊的引用数据类型，用于定义一组方法但不实现它们。类可以通过实现接口来获得这些方法。</li>
<li><strong>数组：</strong>数组是一种可以存储固定数量相同类型元素的引用数据类型。数组本身也是一个对象。</li>
</ul>
<h2 id="包装类型和基本类型的区别是什么？"><a href="#包装类型和基本类型的区别是什么？" class="headerlink" title="包装类型和基本类型的区别是什么？"></a>包装类型和基本类型的区别是什么？</h2><p>最主要的区别是包装类型是对象，拥有字段和方法，可以很方便地调用一些基本的方法，初始值是null，而且可以使用null代表空值，<br>而基本数据类型只能使用0来代表初始值。其次是基本数据类型是直接存储在栈中，而包装类型是一个对象，对象的引用变量是存储在栈中，存储了对象在堆中的地址，对象的数据是存在堆中。</p>
<h1 id="Integer-缓存问题"><a href="#Integer-缓存问题" class="headerlink" title="Integer 缓存问题"></a>Integer 缓存问题</h1><p>在聊缓存之前，我们先来看一个例子。如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">127</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line">System.out.println(a == b); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="type">Integer</span> <span class="variable">c</span> <span class="operator">=</span> Integer.valueOf(<span class="number">127</span>);</span><br><span class="line">System.out.println(b == c); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>从上面的代码可以看出，我们都是127整数。但是输出的结果不同。先给出结论：</p>
<ul>
<li>通过 new Integer()创建Integer对象，每次执行都会返回全新的Integer对象；</li>
<li>通过Integer.valueOf()创建Integer对象，如果传入的数值在-128~127之间，那么会返回缓存的Integer对象，否则返回新的Integer对象。</li>
<li>Integer b &#x3D; 127;实际上会调用Integer.valueOf()方法进行封装；</li>
</ul>
<p><strong>原因：</strong><br>Integer 内部有一个 私有静态内部类 IntegerCache。 其中有一段静态代码块，在类加载的时候被执行，会将 -128 ~ 127 的数值进行缓存，放入一个数组中。</p>
<p>在我们调用Integer.valueOf() 方法时，会判断数值是否在-128~127范围内，如果在：就会从 IntegerCache 缓存的数组中取值，否则就返回新的 Integer 对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 源码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title function_">valueOf</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>实践：</strong><br>我们在开发中对比Intger值是否相等时，最好不要使用 “&#x3D;&#x3D;” 操作符，而是使用Objects.equals()方法。使用Objects.equals 可以不用关心他们哪个是null，不是null的在前面。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">323</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">323</span>;</span><br><span class="line">System.out.println(a == b); <span class="comment">// false</span></span><br><span class="line">System.out.println(Objects.equals(a, b)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p><strong>举一反三：</strong><br>Long 同样有 LongCache 静态内部类，缓存范围也是 [-128 ~ 127]。</p>
<h1 id="抽象类有哪些特点？"><a href="#抽象类有哪些特点？" class="headerlink" title="抽象类有哪些特点？"></a>抽象类有哪些特点？</h1><p>抽象类就像一个模板，大家一样的行为都在模板中定义，不同的点就声明成抽象方法，交由子类去实现。因为有没有实现的部分，所以抽象类自己不能初始化。</p>
<ol>
<li>抽象类由abstract 声明；</li>
<li>抽象类中需要交由子类实现的功能，由abstract声明；</li>
<li>抽象类不能被实例化；</li>
<li>其他都和普通的类一样（可以被继承、也可以继承别人等等）。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractAnimal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        eat();</span><br><span class="line">        sleep();</span><br><span class="line">        run();</span><br><span class="line">        jump();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">jump</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><p>来来来，我们来看一个经典面试题：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(a == b);</span><br></pre></td></tr></table></figure>
<p>a 到底等于 b 吗？<br><strong>首先给出结论：</strong>false</p>
<p>我们来分析一下创建过程：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 首先会在字符串常量池中找是否存在hello这个字符串。</span></span><br><span class="line"><span class="comment">// 如果不存在，在常量池中创建一个，并返回引用地址</span></span><br><span class="line"><span class="comment">// 如果存在，直接返回引用地址</span></span><br><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同上，先处理字面量：会先在字符串常量池中找，没找到就在常量池创建，最终返回引用地址</span></span><br><span class="line"><span class="comment">// 上一步完成之后，会执行new动作。会在堆中创建一个hello对象（与常量池不一样），并返回引用地址</span></span><br><span class="line"><span class="type">Strin</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>常量池是运行时常量池的一部分，位于方法区中。</p>
<h1 id="为什么JDK9开始，String-内部使用byte-存放数据？"><a href="#为什么JDK9开始，String-内部使用byte-存放数据？" class="headerlink" title="为什么JDK9开始，String 内部使用byte[]存放数据？"></a>为什么JDK9开始，String 内部使用byte[]存放数据？</h1><p>主要原因：优化内存使用和性能</p>
<ul>
<li>JDK9 之前：<ul>
<li>String 使用char[]数组来存储字符数据；</li>
<li>每个char占用2个字节，无论字符的实际编码是多少</li>
</ul>
</li>
<li>JDK9及以后：<ul>
<li>String 类使用 byte[] 数组来存储字符数据。</li>
<li>引入了一个新的字段 coder，用于表示字符编码方式（LATIN1 或 UTF16）。</li>
<li>LATIN1 编码方式下，每个字符占用 1 个字节（适用于ASCII字符集）。</li>
<li>UTF16 编码方式下，每个字符占用 2 个字节（适用于Unicode字符集）。</li>
</ul>
</li>
</ul>
<h1 id="StringBuilder-和-StringBuffer-之间的区别是什么？"><a href="#StringBuilder-和-StringBuffer-之间的区别是什么？" class="headerlink" title="StringBuilder 和 StringBuffer 之间的区别是什么？"></a>StringBuilder 和 StringBuffer 之间的区别是什么？</h1><p>StringBuilder 和 StringBuffer 都继承自 AbstractStringBuilder, 所以他们的功能基本上都相似，主要就是用于构建和操作字符串。<br>区别就在于 StringBuffer 的方法加了 synchronized 而StringBuilder没有加。也就是一个是线程安全的一个是线程不安全的。</p>
<p>所以在多线程环境下我们应该使用StringBuffer.</p>
<p>其实还有一个点就是: String字符串的拼接底层用的还是StringBuffer:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> a + <span class="string">&quot;asd&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相当于</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">StringBuffer</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(a);</span><br><span class="line">    b.append(<span class="string">&quot;asd&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> b.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所以要频繁拼接字符串的时候都使用StringBuffer或StringBuilder进行，提高效率，减少常量池内容。</p>
<h1 id="为什么hashCode和equals方法要一起重写？"><a href="#为什么hashCode和equals方法要一起重写？" class="headerlink" title="为什么hashCode和equals方法要一起重写？"></a>为什么hashCode和equals方法要一起重写？</h1><p>在 Java 中，hashCode 和 equals 方法通常需要一起重写，这是因为它们之间存在密切的关系，共同确保对象在集合中的正确行为，特别是在使用哈希表（如 HashMap、HashSet）时。以下是详细的原因：</p>
<ol>
<li>equals 方法的作用<br>equals 方法用于判断两个对象是否相等。默认情况下，Object 类的 equals 方法基于对象的引用进行比较，即只有当两个对象是同一个对象时才返回 true。为了实现逻辑上的相等性，我们通常需要重写 equals 方法。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>逻辑相等，重写equals：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span> == obj) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (obj == <span class="literal">null</span> || getClass() != obj.getClass()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">MyClass</span> <span class="variable">other</span> <span class="operator">=</span> (MyClass) obj;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.field1.equals(other.field1) &amp;&amp; <span class="built_in">this</span>.field2.equals(other.field2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>hashCode 方法的作用<br>hashCode 方法用于生成对象的哈希码。哈希码是一个整数，通常用于快速定位对象在哈希表中的位置。默认情况下，Object 类的 hashCode 方法返回对象的内存地址的某种表示(<strong>实际上，Object 类的 hashCode 方法并不直接返回对象的内存地址，而是返回一个与对象的内存地址相关的整数值。这个值在不同的 JVM 实现中可能会有所不同，但通常是为了提供一个唯一的标识符。</strong>)。</li>
</ol>
<p>hashCode按照字段重写：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> field1.hashCode();</span><br><span class="line">    result = <span class="number">31</span> * result + field2.hashCode();</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>hashCode 和 equals 的关系<br>3.1 一致性要求<br>相等的对象必须具有相同的哈希码：如果两个对象通过 equals 方法判断为相等，那么它们的 hashCode 方法必须返回相同的值。这是为了确保在哈希表中，相等的对象能够被正确地放置在同一个桶中。<br>不相等的对象可以有不同的哈希码：如果两个对象通过 equals 方法判断为不相等，它们的 hashCode 方法可以返回不同的值，但这不是强制性的。实际上，不同的对象也可能返回相同的哈希码，这称为哈希冲突。<br>3.2 哈希表的工作原理<br>在哈希表中（如 HashMap、HashSet），对象的哈希码用于快速定位对象所在的桶。具体步骤如下：</li>
</ol>
<p>计算哈希码：根据对象的 hashCode 方法计算哈希码。<br>定位桶：根据哈希码确定对象应该存储在哪个桶中。<br>比较对象：在同一个桶中，使用 equals 方法比较对象，以确定是否已经存在相等的对象。</p>
<h2 id="为什么要重写hashCode"><a href="#为什么要重写hashCode" class="headerlink" title="为什么要重写hashCode?"></a>为什么要重写hashCode?</h2><p>另一种问法： 重写equals时为什么一定要重写hashCode?</p>
<p>equals 方法和 hashCode 方法是 Object 类中的两个基础方法，它们共同协作来判断两个对象是否相等。</p>
<p><strong>那为什么要设计这两个函数呢？一个不行吗？</strong></p>
<blockquote>
<p>主要目的是提高性能。<br>  hashcode快速定位桶的位置，equals从逻辑上确定是一个东西。<br>  一个方法是可行的。没有这两个方法，那么就得从头到尾一个一个匹配，效率低下。</p>
</blockquote>
<p><strong>那为什么不直接使用hashCode就确定两个对象是否相等呢？</strong></p>
<blockquote>
<p>这是因为不同对象的hashCode可能相同；<br>但hashCode不同的对象一定不相等；<br>所以还需要equals来从业务逻辑上确定是否真的相等；</p>
</blockquote>
<p>因为Object上的equals是两个对象的引用相同时才算相等。而真实业务中，更多的相等说的是业务意义上的相等，比如：用户对象，只要用户名一样就任务相等。<br>所以对于业务对象来说，equals是一定要重写的。</p>
<p>为什么一定要重写hashCode呢？<br>因为集合和Map中，去重都是通过先判断对象的hashcode是否一致，不一致就认为不相同了。<br>如果没有重写hashcode，那么就会调用Object的hashcode方法，这个是根据对象所在内存地址算出来的一个整数，因为两个对象内存地址不一致，大体上算出的hashcode也就不一样了（除非hash碰撞，出现一致，但概率极低）。<br>在重写 equals 方法时，也重写了 hashCode 方法，那么在执行判断时会去执行重写的 hashCode 方法，此时对比的是两个对象的所有属性的 hashCode 是否相同，于是调用 hashCode 返回的结果就是 true，再去调用 equals 方法，发现两个对象确实是相等的，于是就返回 true 了。</p>
<h1 id="那为什么对比对象所有属性的hashcode时就能相等呢？"><a href="#那为什么对比对象所有属性的hashcode时就能相等呢？" class="headerlink" title="那为什么对比对象所有属性的hashcode时就能相等呢？"></a>那为什么对比对象所有属性的hashcode时就能相等呢？</h1><p><strong>（可以不是所有属性，由业务确定哪些属性唯一）</strong><br>正如上面说的那样，不重写hashCode时，使用的是Object的hashCode，根据内存来算出的地址：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) o;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(username, user.username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hashCode(username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;zheng&quot;</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;zheng&quot;</span>), <span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(user1.hashCode() == user2.hashCode()); <span class="comment">// true</span></span><br><span class="line">        System.out.println(user1.equals(user2)); <span class="comment">// true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那么上面我的user1和user2的username是不同对象，根据他们计算hashCode，就应该不相同啊。</p>
<p><strong>关键：</strong>String自己重写了hashCode方法，并不是使用的Object的hashCode。String的hashCode是根据字符串值来计算hashCode；<br>同理，Integer、Long等类都实现了自己的hashCode方法，Integer 返回int值作为hashCode，Long 类的 hashCode 方法会将 long 值的高 32 位和低 32 位组合起来生成一个 int 值作为哈希码。这是为了确保 long 值的完整信息能够在 int 范围内表示。</p>
<p><strong>总结：</strong></p>
<ol>
<li>不自定义实现hashCode 和 equals， 那么就会采用Object对象的hashCode和equals对象<ol>
<li>hashCode：按照对象内存地址计算得到一个数值，对象不同，hashCode大概率不同；</li>
<li>equals：两个对象应用地址一样，实际上就是一个对象，这种很少。一般都是业务上的相同，基本上都会重写equals，来满足相等性。</li>
</ol>
</li>
<li>Java提供的8大类型都实现了自己的hashCode和equals方法，所以我们自己的对象按照字段重写hashCode和equals时能够保证值一样就相等。</li>
</ol>
<h1 id="Object-有哪些自带方法？"><a href="#Object-有哪些自带方法？" class="headerlink" title="Object 有哪些自带方法？"></a>Object 有哪些自带方法？</h1><ul>
<li>registerNatives()：native方法</li>
<li>getClass()：native方法</li>
<li>hashCode()：native方法</li>
<li>equals</li>
<li>clone()：native方法</li>
<li>toString()</li>
<li>notify()：native方法</li>
<li>notifyAll()：native方法</li>
<li>wait()</li>
<li>wait(long timeoutMillis)：native方法</li>
<li>wait(long timeoutMillis, int nanos)</li>
<li>finalize(): 9之后被废弃</li>
</ul>
<h2 id="registerNatives"><a href="#registerNatives" class="headerlink" title="registerNatives:"></a>registerNatives:</h2><p>用于注册Object中native方法用的。有些实现用Java实现比较困难或者效率没那么高的时候，就会用到C或C++等其他语言来实现，这个时候就需要注册。<br>注册实际上就是Java中的方法和本地方法之间建立一个映射关系，调用Java方法时，能够快速找到本地方法执行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">registerNatives</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    registerNatives();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以我们自定义的类有本地实现的时候，也需要上面这段代码来完成Java方法和本地方法的注册：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">&quot;mylib&quot;</span>); <span class="comment">// 加载包含本地方法实现的库</span></span><br><span class="line">        registerNatives(); <span class="comment">// 注册本地方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">nativeMethod</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">registerNatives</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyClass</span> <span class="variable">myClass</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line">        myClass.nativeMethod(); <span class="comment">// 调用本地方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>C&#x2F;C++实现：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MyClass.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现 nativeMethod</span></span><br><span class="line">JNIEXPORT <span class="type">void</span> JNICALL <span class="title function_">Java_MyClass_nativeMethod</span><span class="params">(JNIEnv *env, jobject obj)</span> &#123;</span><br><span class="line">    <span class="comment">// 你的本地方法实现</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Native method called\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现 registerNatives</span></span><br><span class="line">JNIEXPORT <span class="type">void</span> JNICALL <span class="title function_">Java_MyClass_registerNatives</span><span class="params">(JNIEnv *env, jclass cls)</span> &#123;</span><br><span class="line">    JNINativeMethod methods[] = &#123;</span><br><span class="line">        &#123;<span class="string">&quot;nativeMethod&quot;</span>, <span class="string">&quot;()V&quot;</span>, (<span class="type">void</span>*)Java_MyClass_nativeMethod&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    env-&gt;RegisterNatives(cls, methods, <span class="keyword">sizeof</span>(methods) / <span class="keyword">sizeof</span>(methods[<span class="number">0</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="getClass"><a href="#getClass" class="headerlink" title="getClass"></a>getClass</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@HotSpotIntrinsicCandidate</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> Class&lt;?&gt; getClass();</span><br></pre></td></tr></table></figure>
<p>getClass 方法用于获取当前对象的运行时类信息。这个方法返回一个 Class 对象，该对象表示对象所属的类。</p>
<h2 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode"></a>hashCode</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@HotSpotIntrinsicCandidate</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>
<p>根据对象的内存地址计算出一个整数。相同对象的hashCode一定相等。相等hashCode，对象不一定相等。<br>重写equals一定要重写hashCode。</p>
<h2 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>引用地址相同的对象才算相等。业务上一般不会这么使用。所以都会重写equals方法。</p>
<h2 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@HotSpotIntrinsicCandidate</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">native</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException;</span><br></pre></td></tr></table></figure>
<p>实现对象的浅拷贝，只有实现了Cloneable接口才可以调用该方法，否则会抛出异常。</p>
<h2 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getClass().getName() + <span class="string">&quot;@&quot;</span> + Integer.toHexString(hashCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>将对象转成string内容，一般子类都会进行覆盖。</p>
<h2 id="notify"><a href="#notify" class="headerlink" title="notify"></a>notify</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@HotSpotIntrinsicCandidate</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">notify</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>
<p>该方法唤醒在该对象上等待的某个线程。</p>
<h2 id="notifyAll"><a href="#notifyAll" class="headerlink" title="notifyAll"></a>notifyAll</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@HotSpotIntrinsicCandidate</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">notifyAll</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>
<p>该方法唤醒在该对象上等待的所有线程。</p>
<h2 id="wait"><a href="#wait" class="headerlink" title="wait"></a>wait</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">wait</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    wait(<span class="number">0L</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">wait</span><span class="params">(<span class="type">long</span> timeoutMillis)</span> <span class="keyword">throws</span> InterruptedException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">wait</span><span class="params">(<span class="type">long</span> timeoutMillis, <span class="type">int</span> nanos)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="keyword">if</span> (timeoutMillis &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;timeoutMillis value is negative&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nanos &lt; <span class="number">0</span> || nanos &gt; <span class="number">999999</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;nanosecond timeout value out of range&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nanos &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        timeoutMillis++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    wait(timeoutMillis);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用该方法之后，线程会进入该对象锁的等待队列（前提是该线程本身拥有该对象锁）直到获得锁或被中断。<br>其他线程可以通过notify 或 notifyAll 唤醒线程重新去获取对象锁。<br>或者其他线程调用interrupt终端该线程。<br>或则wait传入的时间到了。自动唤醒。</p>
<h2 id="finalize"><a href="#finalize" class="headerlink" title="finalize"></a>finalize</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Deprecated(since=&quot;9&quot;)</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123; &#125;</span><br></pre></td></tr></table></figure>
<p>用于在对象即将被垃圾回收器回收之前执行一些清理工作。例如关闭文件句柄、释放系统资源等。但由于其潜在的问题和限制，现代 Java 编程中很少推荐使用它。</p>
<p>尽管 finalize 方法看起来很有用，但它有几个重要的问题和限制：</p>
<ol>
<li>不确定性：无法保证 finalize 方法何时会被调用，甚至可能永远不会被调用。垃圾回收器的调用时机是不确定的，依赖 finalize 方法进行资源管理是不可靠的。</li>
<li>性能开销：每次调用 finalize 方法都会增加垃圾回收的开销，因为它需要两次垃圾回收周期才能完全回收对象。</li>
<li>死锁风险：如果 finalize 方法中存在死锁或其他阻塞操作，可能会导致整个垃圾回收过程被阻塞。</li>
<li>资源泄露：如果 finalize 方法未能正确释放资源，可能会导致资源泄露。</li>
</ol>
<h1 id="Java中的访问控制符有哪些？"><a href="#Java中的访问控制符有哪些？" class="headerlink" title="Java中的访问控制符有哪些？"></a>Java中的访问控制符有哪些？</h1><table>
<thead>
<tr>
<th>访问范围</th>
<th>private</th>
<th>default</th>
<th>protected</th>
<th>public</th>
</tr>
</thead>
<tbody><tr>
<td>本类中</td>
<td>允许</td>
<td>允许</td>
<td>允许</td>
<td>允许</td>
</tr>
<tr>
<td>同一包中的类（子类&#x2F;非子类）</td>
<td></td>
<td>允许</td>
<td>允许</td>
<td>允许</td>
</tr>
<tr>
<td><strong>其他包中的子类</strong></td>
<td></td>
<td></td>
<td>允许</td>
<td>允许</td>
</tr>
<tr>
<td><strong>其他包中非子类</strong></td>
<td></td>
<td></td>
<td></td>
<td>允许</td>
</tr>
</tbody></table>
<h1 id="Java的构造器有哪些特点"><a href="#Java的构造器有哪些特点" class="headerlink" title="Java的构造器有哪些特点"></a>Java的构造器有哪些特点</h1><ol>
<li>名称与类名相同、不返回任何值、可以重载、可以调用其他构造器、可以有访问修饰符、可以抛出异常、可以调用父类构造器</li>
<li>如果我们没有显示编写构造器，在编译时，会为我们提供一个默认的无参构造器。</li>
<li>在调用构造器之前，已经在队中分配内存。并进行默认初始化。之后会调用构造器，如果有父类构造器会先执行父类构造器，父类完成后执行自身的初始化内容，完成初始化。</li>
</ol>
<h1 id="Java中的内部类时怎样的？"><a href="#Java中的内部类时怎样的？" class="headerlink" title="Java中的内部类时怎样的？"></a>Java中的内部类时怎样的？</h1><p>内部类分为：</p>
<ul>
<li>静态内部类：静态内部类是与外部类相关的<blockquote>
<p>静态内部类一般使用public static修饰，也可以使用private static使用，那样只能在外部类内部使用。在外部类以外的地方使用静态类时，需要带上外部类的包名，例如创建一个静态内部类对象：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OutClass.<span class="type">InnerClass</span> <span class="variable">object</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutClass</span>.InnerClass();</span><br></pre></td></tr></table></figure></li>
<li>非静态内部类：非静态内部类是与外部类的实例对象相关的<blockquote>
<p>非静态内部类是跟外部类的实例对象绑定在一起的。外部类一般是由两种访问修饰符default（只能包内访问），public（所有位置可以访问）。而非静态内部类有private，default，protected，public四种访问修饰符。因为必须跟外部类的实例对象绑定在一起，所以非静态内部类不能有静态方法，静态成员变量，静态初始化块，在外面创建一个非静态内部类对象：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">OutClass</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutClass</span>();</span><br><span class="line">OutClass.<span class="type">InnerClass</span> <span class="variable">object</span> <span class="operator">=</span> out.<span class="keyword">new</span> <span class="title class_">InnerClass</span>();</span><br></pre></td></tr></table></figure></li>
</ul>
<table>
<thead>
<tr>
<th>访问范围</th>
<th>private</th>
<th>default</th>
<th>protected</th>
<th>public</th>
</tr>
</thead>
<tbody><tr>
<td>本类中</td>
<td>允许</td>
<td>允许</td>
<td>允许</td>
<td>允许</td>
</tr>
<tr>
<td>同一包中的类（子类&#x2F;非子类）</td>
<td></td>
<td>允许</td>
<td>允许</td>
<td>允许</td>
</tr>
<tr>
<td><strong>其他包中的子类</strong></td>
<td></td>
<td></td>
<td></td>
<td>允许</td>
</tr>
<tr>
<td><strong>其他包中非子类</strong></td>
<td></td>
<td></td>
<td></td>
<td>允许</td>
</tr>
</tbody></table>
<h1 id="Java中的注解是什么？"><a href="#Java中的注解是什么？" class="headerlink" title="Java中的注解是什么？"></a>Java中的注解是什么？</h1><p>Java 注解（Annotations）是一种元数据形式，可以提供有关程序元素（如类、方法、变量等）的额外信息。注解不会直接影响代码的执行，但可以被编译器、工具或运行时环境使用，以影响程序的行为或生成额外的信息。<br>更直白一点就是在类、字段、方法上面打个标记，在其他地方读取这些标记干一些其他事情。</p>
<h2 id="注解定义"><a href="#注解定义" class="headerlink" title="注解定义"></a>注解定义</h2><ul>
<li>注解是附加在代码上的元数据，用于描述代码的某些特性。</li>
<li>注解本身并不直接改变代码的行为，但可以通过注解处理器在编译时或运行时对代码进行处理。</li>
</ul>
<h2 id="注解用途"><a href="#注解用途" class="headerlink" title="注解用途"></a>注解用途</h2><ul>
<li>编译时检查：帮助编译器验证代码的正确性。</li>
<li>编译时处理：生成额外的源代码或资源文件。</li>
<li>运行时处理：在运行时通过反射机制读取注解信息并执行相应的逻辑。</li>
</ul>
<h2 id="注解分类"><a href="#注解分类" class="headerlink" title="注解分类"></a>注解分类</h2><ul>
<li>内置注解<ul>
<li>@Override：表示一个方法覆盖了父类的方法。</li>
<li>@Deprecated：表示一个方法或类已被弃用。</li>
<li>@SuppressWarnings：抑制编译器警告。</li>
</ul>
</li>
<li>元注解：用于申明自定义注解使用<ul>
<li>@Retention：指定注解的保留策略，即注解在什么级别可用。<ul>
<li>RetentionPolicy.SOURCE：注解仅在源代码级别保留，编译时会被丢弃。</li>
<li>RetentionPolicy.CLASS：注解在字节码文件中保留，默认值。</li>
<li>RetentionPolicy.RUNTIME：注解在运行时保留，可以通过反射读取。</li>
</ul>
</li>
<li>@Target：指定注解可以应用的目标类型。<ul>
<li>ElementType.TYPE：类、接口、枚举。</li>
<li>ElementType.FIELD：字段、枚举常量。</li>
<li>ElementType.METHOD：方法。</li>
<li>ElementType.PARAMETER：方法参数。</li>
<li>ElementType.CONSTRUCTOR：构造函数。</li>
<li>ElementType.LOCAL_VARIABLE：局部变量。</li>
<li>ElementType.ANNOTATION_TYPE：注解类型。</li>
<li>ElementType.PACKAGE：包。</li>
</ul>
</li>
<li>@Documented：表示注解应该包含在生成的 Javadoc 中。</li>
<li>@Inherited：表示注解可以被子类继承。</li>
</ul>
</li>
<li>自定义注解： 来满足特定的需求。</li>
</ul>
<h2 id="自定义注解示例"><a href="#自定义注解示例" class="headerlink" title="自定义注解示例"></a>自定义注解示例</h2><p>以下是一个自定义注解的示例，用于标记需要日志记录的方法：</p>
<ol>
<li>定义注解 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义注解</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Loggable &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>使用注解<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Loggable(value = &quot;This is a loggable method&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Executing myMethod&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>注解处理器<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationProcessor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Method[] methods = obj.getClass().getMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            <span class="keyword">if</span> (method.isAnnotationPresent(Loggable.class)) &#123;</span><br><span class="line">                <span class="type">Loggable</span> <span class="variable">loggable</span> <span class="operator">=</span> method.getAnnotation(Loggable.class);</span><br><span class="line">                System.out.println(<span class="string">&quot;Processing method: &quot;</span> + method.getName());</span><br><span class="line">                System.out.println(<span class="string">&quot;Log message: &quot;</span> + loggable.value());</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 调用方法</span></span><br><span class="line">                method.invoke(obj);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">MyClass</span> <span class="variable">myClass</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line">        process(myClass);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="Java异常体系？"><a href="#Java异常体系？" class="headerlink" title="Java异常体系？"></a>Java异常体系？</h1><p><img src="/2024/11/15/Java-Base/java-exception.png" alt="图片" title="Java异常体系"><br>Java 的异常体系基于类层次结构，所有异常都继承自 Throwable 类。主要分为两大类：Error 和 Exception。下面详细介绍 Java 异常体系的主要组成部分及其特点。</p>
<ol>
<li><p>Throwable 类<br>Throwable 是 Java 异常体系的顶级父类，所有异常类都直接或间接继承自 Throwable。Throwable 类提供了几个重要的方法，如 getMessage()、getStackTrace() 和 printStackTrace()，用于获取异常信息和堆栈跟踪。</p>
</li>
<li><p>Error 类<br>Error 类及其子类表示严重的错误，通常是不可恢复的，如虚拟机错误、内存溢出等。这些错误通常不是应用程序应该捕获和处理的，而是应该让 JVM 处理。</p>
</li>
<li><p>Exception 类<br>Exception 类及其子类表示程序可以捕获和处理的异常。Exception 类又可以分为两大类：受检异常（Checked Exceptions）和非受检异常（Unchecked Exceptions）。</p>
<ul>
<li><strong>受检异常（Checked Exceptions）</strong><blockquote>
<p>受检异常是编译器强制要求处理的异常。如果方法中抛出了受检异常，那么必须在方法签名中声明该异常，或者在方法内部使用 try-catch 块捕获并处理该异常。</p>
<p>常见受检异常包括：</p>
<p>IOException：输入输出异常。<br>SQLException：数据库访问异常。<br>ClassNotFoundException：找不到指定类的异常。</p>
</blockquote>
</li>
<li><strong>非受检异常（Unchecked Exceptions）</strong><blockquote>
<p>非受检异常是编译器不要求处理的异常。这类异常通常是编程错误或运行时错误，如空指针异常、数组越界异常等。</p>
<p>常见非受检异常包括：</p>
<ul>
<li>RuntimeException：运行时异常。<ul>
<li>NullPointerException：空指针异常。</li>
<li>ArrayIndexOutOfBoundsException：数组索引越界异常。</li>
<li>IllegalArgumentException：非法参数异常。</li>
<li>ArithmeticException：算术异常，如除以零。</li>
</ul>
</li>
<li>AssertionError：断言错误。</li>
<li>NoSuchMethodError：方法不存在错误。</li>
</ul>
</blockquote>
</li>
</ul>
</li>
<li><p>自定义异常<br>除了使用 Java 内置的异常类，你还可以自定义异常类来处理特定的错误情况。自定义异常类通常继承自 Exception 或其子类。</p>
</li>
</ol>
<h1 id="Java中到底是值传递还是引用传递？"><a href="#Java中到底是值传递还是引用传递？" class="headerlink" title="Java中到底是值传递还是引用传递？"></a>Java中到底是值传递还是引用传递？</h1><p><strong>引用传递：</strong><br>在调用方法时，将实际参数的地址直接传递到方法中，那么在方法中对参数所进行的修改，将影响到实际参数。<strong>但是，如果你在方法内部将引用重新指向另一个对象，这不会影响到原始引用。</strong>因为我们的参数引用地址发生了变化，而原先的引用地址没有变化。</p>
<p><strong>值传递：</strong><br>在调用方法时将实际参数拷贝一份传递到方法中，这样在方法中如果对参数进行修改，将不会影响到实际参数。</p>
<p><strong>Java是值传递：</strong></p>
<ul>
<li>当传的是基本类型时，传的是值的拷贝，对拷贝变量的修改不影响原变量；</li>
<li>当传的是引用类型时，传的是引用地址的拷贝，但是拷贝的地址和真实地址指向的都是同一个真实数据，因此可以修改原变量中的值；</li>
<li>当传的是String类型时，虽然拷贝的也是引用地址，指向的是同一个数据，但是String的值不能被修改，因此无法修改原变量中的值（对String修改，只能是赋予新对象值，所以原始引用不受影响）。</li>
</ul>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
  </entry>
</search>
